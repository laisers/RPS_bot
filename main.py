import asyncio
import sqlite3, random
from pyqiwip2p import QiwiP2P

from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from config import *
from texts import *
from keyboards import *
import functions


class StorageFunctions(StatesGroup):
    here_game_start = State()
    here_continue_game = State()
    here_knb_game = State()
    here_pay_qiwi = State()


SQLITE_DATABASE = 'db.sqlite'

# Checking the presence of tables in the database, if not - create
with sqlite3.connect(SQLITE_DATABASE, detect_types=sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
    cur = con.cursor()
    # USERS
    try:
        cur.execute("SELECT * FROM users")
    except sqlite3.OperationalError:
        print("TABLE < users > NOT FOUND")
        cur.execute(
            "CREATE TABLE users(iduser TEXT, balance INT, wins INT, sub_notifications INT)")
        print("TABLE < users > SUCCESS CREATED")
if con:
    con.close()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–∫ –∫ –±–æ—Ç—É
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

p2p = QiwiP2P(auth_key=QIWI_TOKEN)


# Start command handler
@dp.message_handler(commands=['start'], state="*")
async def start_message(message: types.Message, state: FSMContext):
    await message.answer(welcome, parse_mode="HTML", reply_markup=but_menu())
    with sqlite3.connect(SQLITE_DATABASE, detect_types=sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
        cur = con.cursor()
        respone = cur.execute("SELECT * FROM users WHERE iduser = ?", (message.from_user.id,)).fetchone()
        if respone is None:
            cur.executemany(
                "INSERT INTO users(iduser, balance, wins, sub_notifications) VALUES (?, ?, ?, ?)",
                [(message.from_user.id, USER_STARTBALANCE, 0, 1)])


# –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', state="*")
async def lk(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=but_menu())


# –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
@dp.message_handler(text='üî∞ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', state="*")
async def document(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(documentation, parse_mode="HTML", reply_markup=but_menu())


# –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
@dp.message_handler(text='üìô –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', state="*")
async def lk(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(text_profile(message.from_user.id), reply_markup=inline_profile,
                         parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–≥—Ä–∞—Ç—å"
@dp.message_handler(text='üé≤ –ò–≥—Ä–∞—Ç—å', state="*")
async def game(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏: ', reply_markup=but_back())
    await StorageFunctions.here_game_start.set()


# Other functions
@dp.message_handler(state=StorageFunctions.here_game_start)
async def check_bet(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await state.finish()
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=but_menu())
        return
    with sqlite3.connect(SQLITE_DATABASE, detect_types=sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
        cur = con.cursor()
        cur.execute("SELECT * FROM users WHERE iduser = ?", (message.from_user.id,))
        row = cur.fetchone()
        balance = row[1]
    bet = message.text
    if int(bet) <= 0:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ —Ä–∞–≤–Ω–æ–µ –∏–ª–∏ –º–µ–Ω—å—à–µ–µ –Ω—É–ª—é, —Å—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=but_back())
    elif int(bet) > balance:
        await message.answer('–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, —Å—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=but_back())

    else:
        await message.answer("üîπ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: " + bet)
        captha = random.randint(10000, 99999)
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ:  <b>{captha}</b>  –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç!')
        async with state.proxy() as data:
            data['bet'] = bet
            data['captha'] = captha
        await StorageFunctions.here_continue_game.set()


@dp.message_handler(state=StorageFunctions.here_continue_game)
async def knb_choice(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await state.finish()
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=but_menu())
        return
    async with state.proxy() as data:
        captha = data['captha']
    if message.text == str(captha):
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç: ', reply_markup=keyboard_game)
        await StorageFunctions.here_knb_game.set()
    else:
        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞–ø—á–∞', reply_markup=but_back())


@dp.message_handler(state=StorageFunctions.here_knb_game)
async def knb_game(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await state.finish()
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=but_menu())
        return
    async with state.proxy() as data:
        bet = data['bet']
    with sqlite3.connect(SQLITE_DATABASE, detect_types=sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
        cur = con.cursor()
        sqlite3.connect('db.sqlite')
        cur.execute("SELECT * FROM users WHERE iduser = ?", (message.from_user.id,))
        row = cur.fetchone()
        balance = row[1]
    if int(bet) > int(balance):
        await state.finish()
        await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ üòî', reply_markup=but_menu())
        return
    subjects = ["‚úä –ö–∞–º–µ–Ω—å", "‚úå –ù–æ–∂–Ω–∏—Ü—ã", "ü§ö –ë—É–º–∞–≥–∞"]

    # Selection of items
    player_choice = message.text
    ii_choice = random.choice(subjects)
    print(player_choice)
    print(ii_choice)

    # Development of events
    if player_choice == "‚úä –ö–∞–º–µ–Ω—å" and ii_choice == "‚úä –ö–∞–º–µ–Ω—å":
        await message.answer('üåö –ù–∏—á—å—è!', reply_markup=keyboard_game)
    elif player_choice == "‚úå –ù–æ–∂–Ω–∏—Ü—ã" and ii_choice == "‚úå –ù–æ–∂–Ω–∏—Ü—ã":
        await message.answer('üåö –ù–∏—á—å—è!', reply_markup=keyboard_game)
    elif player_choice == "ü§ö –ë—É–º–∞–≥–∞" and ii_choice == "ü§ö –ë—É–º–∞–≥–∞":
        await message.answer('üåö –ù–∏—á—å—è!', reply_markup=keyboard_game)
    elif player_choice == "‚úä –ö–∞–º–µ–Ω—å" and ii_choice == "‚úå –ù–æ–∂–Ω–∏—Ü—ã":
        await message.answer('üí• –í—ã –ø–æ–±–µ–¥–∏–ª–∏!\n–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–±—Ä–∞–ª "‚úå –ù–æ–∂–Ω–∏—Ü—ã", –Ω–∞–≥—Ä–∞–¥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –∫ –≤–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å.',
                             reply_markup=keyboard_game)
        functions.user_update_balance(message.from_user.id, int(bet))
        functions.user_update_wins(message.from_user.id, 1)
    elif player_choice == "‚úå –ù–æ–∂–Ω–∏—Ü—ã" and ii_choice == "ü§ö –ë—É–º–∞–≥–∞":
        await message.answer('üí• –í—ã –ø–æ–±–µ–¥–∏–ª–∏!\n–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–±—Ä–∞–ª "ü§ö –ë—É–º–∞–≥—É", –Ω–∞–≥—Ä–∞–¥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –∫ –≤–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å.',
                             reply_markup=keyboard_game)
        functions.user_update_balance(message.from_user.id, int(bet))
        functions.user_update_wins(message.from_user.id, 1)
    elif player_choice == "ü§ö –ë—É–º–∞–≥–∞" and ii_choice == "‚úä –ö–∞–º–µ–Ω—å":
        await message.answer('üí• –í—ã –ø–æ–±–µ–¥–∏–ª–∏!\n–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–±—Ä–∞–ª "‚úä –ö–∞–º–µ–Ω—å", –Ω–∞–≥—Ä–∞–¥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –∫ –≤–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å.',
                             reply_markup=keyboard_game)
        functions.user_update_balance(message.from_user.id, int(bet))
        functions.user_update_wins(message.from_user.id, 1)
    elif player_choice == "‚úä –ö–∞–º–µ–Ω—å" and ii_choice == "ü§ö –ë—É–º–∞–≥–∞":
        await message.answer('üò£ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!\n–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–±—Ä–∞–ª "ü§ö –ë—É–º–∞–≥—É", —Å—Ç–∞–≤–∫–∞ –≤—ã—á—Ç–µ–Ω–∞ –∏–∑ –±–∞–ª–∞–Ω—Å–∞.',
                             reply_markup=keyboard_game)
        functions.user_un_balance(message.from_user.id, int(bet))
    elif player_choice == "ü§ö –ë—É–º–∞–≥–∞" and ii_choice == "‚úå –ù–æ–∂–Ω–∏—Ü—ã":
        await message.answer('üò£ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!\n–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–±—Ä–∞–ª "‚úå –ù–æ–∂–Ω–∏—Ü—ã", —Å—Ç–∞–≤–∫–∞ –≤—ã—á—Ç–µ–Ω–∞ –∏–∑ –±–∞–ª–∞–Ω—Å–∞.',
                             reply_markup=keyboard_game)
        functions.user_un_balance(message.from_user.id, int(bet))
    elif player_choice == "‚úå –ù–æ–∂–Ω–∏—Ü—ã" and ii_choice == "‚úä –ö–∞–º–µ–Ω—å":
        await message.answer('üò£ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!\n–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–±—Ä–∞–ª "‚úä –ö–∞–º–µ–Ω—å", —Å—Ç–∞–≤–∫–∞ –≤—ã—á—Ç–µ–Ω–∞ –∏–∑ –±–∞–ª–∞–Ω—Å–∞.',
                             reply_markup=keyboard_game)
        functions.user_un_balance(message.from_user.id, int(bet))


@dp.callback_query_handler(text='paybal_inline', state="*")
async def show_payment(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text(text_profile(call.message.chat.id), parse_mode="Markdown")
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ')
    await StorageFunctions.here_pay_qiwi.set()


@dp.message_handler(state=StorageFunctions.here_pay_qiwi)
async def payment(message: types.Message, state: FSMContext):
    await state.finish()
    amount = message.text
    if amount.isdigit():
        if int(amount) < 10:
            await message.answer('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 10 —Ä—É–±–ª–µ–π')
            return
        bill = p2p.bill(amount=amount, lifetime=45)  # –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
        key = InlineKeyboardMarkup()
        key.add(InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å', url=bill.pay_url))
        key.add(InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data=f"checkpay:{bill.bill_id}:{amount}"))
        await message.answer('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"',
                             reply_markup=key)
    else:
        await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
@dp.callback_query_handler(text_startswith='checkpay', state="*")
async def checkpayf(call: CallbackQuery, state: FSMContext):
    await state.finish()
    bill_id = call.data.split(':')[1]
    amount = call.data.split(':')[2]
    status = p2p.check(bill_id=bill_id).status
    if status == 'PAID':
        pay_id = random.randint(10000, 99999)
        functions.add_refill(pay_id, call.message.chat.id, amount)
        await call.message.answer(f'‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω\n<code>–ù–æ–º–µ—Ä —á–µ–∫–∞: {pay_id}</code>')
        await call.answer('‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω', False)
        await call.message.delete()
        functions.user_update_balance(call.message.chat.id, int(amount))
        await call.message.answer(text_profile(call.message.chat.id), reply_markup=inline_profile,
                                  parse_mode="Markdown")
    elif status == 'WAITING':
        await call.answer('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã', False)
    else:
        await call.answer('‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', True)


###
with sqlite3.connect(SQLITE_DATABASE, detect_types=sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
    cur = con.cursor()
    cur.execute("SELECT Count(*) FROM users")  # Count na all players(Users)
    row = cur.fetchone()
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
print(f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞: {ADMINS}\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {row[0]}')  # Mini statistics

if __name__ == "__main__":
    executor.start_polling(dp)
